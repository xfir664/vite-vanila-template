{"version":3,"file":"init-range-slider-kdejnTRd.js","sources":["../../src/classes/double-range-slider/double-range-slider.js","../../src/modules/init-range-slider.js"],"sourcesContent":["import \"./double-range-slider.css\";\r\n\r\nexport default class DoubleRangeSlider {\r\n  constructor(selector, settings = {}) {\r\n    const mainSelector = document.querySelector(selector);\r\n    if (!mainSelector) return;\r\n\r\n    this.minNumberInput = mainSelector.querySelector(\".input-min\");\r\n    this.maxNumberInput = mainSelector.querySelector(\".input-max\");\r\n    this.minRangeInput = mainSelector.querySelector(\".range-min\");\r\n    this.maxRangeInput = mainSelector.querySelector(\".range-max\");\r\n    this.rangeBar = mainSelector.querySelector(\".range-progress\");\r\n\r\n    this.minValue = this.#getAttributeValue(\r\n      this.minNumberInput,\r\n      \"min\",\r\n      settings.minValue,\r\n      0\r\n    );\r\n    this.maxValue = this.#getAttributeValue(\r\n      this.maxNumberInput,\r\n      \"max\",\r\n      settings.maxValue,\r\n      100\r\n    );\r\n    this.step = this.#getAttributeValue(\r\n      this.minNumberInput,\r\n      \"step\",\r\n      settings.step,\r\n      1\r\n    );\r\n    this.gap = settings.gap || 0;\r\n\r\n    this.#initializeInputs();\r\n    this.#initRangeSlider();\r\n  }\r\n\r\n  #getAttributeValue(input, attr, settingValue, defaultValue) {\r\n    const value = input.getAttribute(attr);\r\n    return value !== null\r\n      ? parseFloat(value)\r\n      : settingValue !== undefined\r\n      ? settingValue\r\n      : defaultValue;\r\n  }\r\n\r\n  #initializeInputs() {\r\n    const inputs = [\r\n      this.minNumberInput,\r\n      this.maxNumberInput,\r\n      this.minRangeInput,\r\n      this.maxRangeInput,\r\n    ];\r\n\r\n    inputs.forEach((input) => {\r\n      if (input) {\r\n        input.min = input.getAttribute(\"min\") || this.minValue;\r\n        input.max = input.getAttribute(\"max\") || this.maxValue;\r\n        input.step = input.getAttribute(\"step\") || this.step;\r\n        input.value =\r\n          input.classList.contains(\"input-min\") ||\r\n          input.classList.contains(\"range-min\")\r\n            ? input.min || this.minValue\r\n            : input.max || this.maxValue;\r\n      }\r\n    });\r\n  }\r\n\r\n  #initRangeSlider() {\r\n    const inputs = [\r\n      this.minNumberInput,\r\n      this.maxNumberInput,\r\n      this.minRangeInput,\r\n      this.maxRangeInput,\r\n    ];\r\n\r\n    inputs.forEach((input) => {\r\n      input.addEventListener(\"input\", (evt) => {\r\n        this.#updateRangeBar(evt.target);\r\n      });\r\n    });\r\n  }\r\n\r\n  #updateRangeBar(input) {\r\n    let min = parseInt(this.minNumberInput.value);\r\n    let max = parseInt(this.maxNumberInput.value);\r\n\r\n    if (this.#isNumberInput(input)) {\r\n      if (max - min < this.gap) {\r\n        input.classList.contains(\"input-min\")\r\n          ? (min = max - this.gap)\r\n          : (max = min + this.gap);\r\n        if (input.classList.contains(\"input-min\")) {\r\n          this.minNumberInput.value = min;\r\n        } else {\r\n          this.maxNumberInput.value = max;\r\n        }\r\n      }\r\n      this.minRangeInput.value = min;\r\n      this.maxRangeInput.value = max;\r\n    } else if (this.#isRangeInput(input)) {\r\n      let rangeMin = parseInt(this.minRangeInput.value);\r\n      let rangeMax = parseInt(this.maxRangeInput.value);\r\n\r\n      if (rangeMax - rangeMin < this.gap) {\r\n        input.classList.contains(\"range-min\")\r\n          ? (rangeMin = rangeMax - this.gap)\r\n          : (rangeMax = rangeMin + this.gap);\r\n        if (input.classList.contains(\"range-min\")) {\r\n          this.minRangeInput.value = rangeMin;\r\n        } else {\r\n          this.maxRangeInput.value = rangeMax;\r\n        }\r\n      }\r\n      this.minNumberInput.value = rangeMin;\r\n      this.maxNumberInput.value = rangeMax;\r\n    }\r\n\r\n    this.#updateProgress();\r\n  }\r\n\r\n  #isNumberInput(input) {\r\n    return input.classList.contains(\"number-input\");\r\n  }\r\n\r\n  #isRangeInput(input) {\r\n    return input.classList.contains(\"range-input\");\r\n  }\r\n\r\n  #updateProgress() {\r\n    if (!this.rangeBar) return;\r\n\r\n    const min = parseInt(this.minRangeInput.value);\r\n    const max = parseInt(this.maxRangeInput.value);\r\n\r\n    const percentMin =\r\n      ((min - parseInt(this.minRangeInput.min)) /\r\n        (this.maxValue - parseInt(this.minRangeInput.min))) *\r\n      100;\r\n    const percentMax =\r\n      ((max - parseInt(this.maxRangeInput.min)) /\r\n        (this.maxValue - parseInt(this.maxRangeInput.min))) *\r\n      100;\r\n\r\n    this.rangeBar.style.left = `${percentMin}%`;\r\n    this.rangeBar.style.right = `${100 - percentMax}%`;\r\n  }\r\n}\r\n","import DoubleRangeSlider from \"./../classes/double-range-slider/double-range-slider\";\r\n\r\nexport function initDoubleRangeSlider() {\r\n  const rangeDouble = new DoubleRangeSlider(\".double-range-wrapper\", {\r\n    minValue: 100,\r\n    maxValue: 1000,\r\n    step: 10,\r\n    gap: 100,\r\n  });\r\n}\r\n"],"names":["_DoubleRangeSlider_instances","getAttributeValue_fn","initializeInputs_fn","initRangeSlider_fn","updateRangeBar_fn","isNumberInput_fn","isRangeInput_fn","updateProgress_fn","DoubleRangeSlider","selector","settings","__privateAdd","mainSelector","__privateMethod","input","attr","settingValue","defaultValue","value","evt","min","max","rangeMin","rangeMax","percentMin","percentMax","initDoubleRangeSlider"],"mappings":"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"}